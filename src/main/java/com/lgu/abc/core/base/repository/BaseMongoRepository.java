package com.lgu.abc.core.base.repository;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import lombok.Setter;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.mongodb.core.query.Query;

import com.lgu.abc.core.base.domain.BaseEntity;
import com.lgu.abc.core.base.domain.query.MongodbQuery;
import com.lgu.abc.core.common.interfaces.Identifiable;
import com.lgu.abc.core.prototype.org.user.User;
import com.lgu.abc.core.support.id.IdMonitor;
import com.u2ware.springfield.repository.mongodb.EntityMongodbRepository;

@SuppressWarnings("unchecked")
public abstract class BaseMongoRepository<T, ID extends Serializable> extends EntityMongodbRepository<T, ID> implements BaseRepository<T, ID> {

	private final Class<T> entityClass;
	
	@Setter
	private IdMonitor idMonitor;
	
	public BaseMongoRepository(Class<T> entityClass) {
		super(entityClass);
		this.entityClass = entityClass;
	}
	
	@Override
	public T create(T entity) {
		T created = super.create(entity);
		
		// TODO handle the case when id is not auto-generated by mongo but by the system.
		if (idMonitor != null && (entity instanceof Identifiable)) 
			idMonitor.add(entity.getClass(), ((Identifiable) created).getId());
		
		return created;
	}

	@Override
	public List<T> findAll(Object query) {
		return find(query, null, null);
	}
	
	@Override
	public List<T> findAll(Object query, Sort sort) {
		return find(query, null, sort);
	}

	@Override
	public Page<T> findAll(Object query, Pageable pageable) {
		long count = count(query);
		List<T> result = count == 0 ? new ArrayList<T>() : find(query, pageable, null);
		
		return new PageImpl<T>(result, pageable, count);
	}

	@Override
	public T save(T entity) {
		getTemplate().save(entity);
		return entity;
	}

	@Override
	public void deleteAll(Object query) {
		getTemplate().remove(build(query), collectionName());
	}
	
	@Override
	public void rearrange(T entity, int to) {
		// TODO implement
		throw new UnsupportedOperationException();
	}

	@Override
	public long count(Object query) {
		return getTemplate().count(build(query), collectionName());
	}

	private String collectionName() {
		return getTemplate().getCollectionName(entityClass);
	}
	
	private Query build(Object query) {
		return ((MongodbQuery) query).build();
	}
	
	protected List<T> find(Object query, Pageable pageable, Sort sort) {
		Query built = build(query);
		
		if (pageable != null) built.with(pageable);
		if (sort != null) built.with(sort);
		
		List<T> found = getTemplate().find(built, entityClass, collectionName());
		for (T entity : found) {
			injectActor(query, entity);
		}
		
		return found;
	}
	
	private void injectActor(Object query, T entity) {
		User actor = getActorFrom(query);
		if (actor != null && entity instanceof BaseEntity) {
			BaseEntity casted = (BaseEntity) entity;
			casted.setActor(actor);
		}
	}
	
	private User getActorFrom(Object object) {
		if (!(object instanceof BaseEntity)) return null;
		return ((BaseEntity) object).getActor();
	}
	
}
